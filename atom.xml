<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>南書兮</title>
  
  <subtitle>一个热爱技术的玩家</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sudlivre.github.io/"/>
  <updated>2019-09-29T06:11:56.622Z</updated>
  <id>https://sudlivre.github.io/</id>
  
  <author>
    <name>Sudlivre</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Golang基础语法之三</title>
    <link href="https://sudlivre.github.io/2019/09/29/Golang%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E4%B8%89/"/>
    <id>https://sudlivre.github.io/2019/09/29/Golang基础语法之三/</id>
    <published>2019-09-29T01:28:06.000Z</published>
    <updated>2019-09-29T06:11:56.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><p>伪随机数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math/rand"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    num1 = rand.Int()</span><br><span class="line">    num2 = rand.Intn(<span class="number">10</span>)</span><br><span class="line">    rand.Seed(<span class="number">1</span>) <span class="comment">// 设置种子数</span></span><br><span class="line">    num3 = rand.Intn(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 时间戳</span></span><br><span class="line">    timeStamp1 = time.Now().Unix()</span><br><span class="line">    timeStamp2 = time.Now().UnixNano()</span><br><span class="line"></span><br><span class="line">    rand.Seed(timeStamp2) <span class="comment">// 根据时间戳设置随机种子</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成区间随机数</span></span><br><span class="line">    num4 = rand.Intn(<span class="number">5</span>) + <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> variable_name [SIZE] variable_type</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> balance1 [<span class="number">10</span>] float <span class="number">32</span></span><br><span class="line"><span class="keyword">var</span> balance2 = [<span class="number">5</span>] floart32&#123;<span class="number">100.0</span>, <span class="number">2.0</span>, <span class="number">3.14</span>, <span class="number">7.0</span>, <span class="number">99.9</span>&#125;</span><br><span class="line">d := [...] <span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">e := [<span class="number">5</span>] <span class="keyword">int</span>&#123;<span class="number">4</span>: <span class="number">100</span>&#125; <span class="comment">// [0,0,0,0,100]</span></span><br><span class="line"></span><br><span class="line">arrayLen := <span class="built_in">len</span>(balance1) <span class="comment">// 容器中已存储的数据量</span></span><br><span class="line">arrayCap := <span class="built_in">cap</span>(balance1) <span class="comment">// 容器中能够存储的最大的数量</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>, &amp;balance1) <span class="comment">// 获取数组的地址</span></span><br></pre></td></tr></table></figure><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a := [...]<span class="keyword">float64</span>&#123;<span class="number">5.5</span>, <span class="number">6.6</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">    fmt.Println(i, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>数组是值类型 理解为存储的数值本身</p></blockquote><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a2 := [<span class="number">3</span>][<span class="number">4</span>]<span class="keyword">int</span>&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;, &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;, &#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="Slice"><a href="#Slice" class="headerlink" title="Slice"></a>Slice</h2><h3 id="切片定义"><a href="#切片定义" class="headerlink" title="切片定义"></a>切片定义</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> identifier []<span class="keyword">type</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> slice1 []<span class="keyword">type</span> = <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)</span><br><span class="line"><span class="comment">// 简写</span></span><br><span class="line">slice2 := <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)</span><br><span class="line"></span><br><span class="line">slice2 = <span class="built_in">append</span>(slice2, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">slice2 = <span class="built_in">append</span>(slice2, slice1...) <span class="comment">// 加上...代表添加里面的元素</span></span><br></pre></td></tr></table></figure><blockquote><p>可以从数组初始化切片，切片是引用类型，改变数组内容，切片内容会一起改变。<br>如果切片容量不够，会重新拷贝一份数组，这是数组改变不会影响切片内容。</p></blockquote><h2 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h2><ul><li>值语义 拷贝值 深拷贝</li><li>引用语义 拷贝地址 浅拷贝</li></ul><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map通过hash表实现</p><p>使用<code>make()</code>函数创建，方法类似Slice。不初始化会创建一个nil map。nil map不能用来存放键值对</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map1 <span class="keyword">map</span>[key_type]value_type <span class="comment">// 声明</span></span><br><span class="line"><span class="keyword">var</span> map2 = <span class="built_in">make</span>(<span class="keyword">map</span>[key_type]value_type) <span class="comment">// 声明并初始化</span></span><br><span class="line"></span><br><span class="line">map2[<span class="number">40</span>] <span class="comment">// key不存在获取默认值</span></span><br><span class="line">value, ok := <span class="keyword">map</span>[key] <span class="comment">// 判断key是否存在</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">map</span>[<span class="number">3</span>] = <span class="number">40</span> <span class="comment">// key存在修改，不存在添加</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">delete</span>(map2, <span class="number">4</span>) <span class="comment">// 删除键值对，不存在不影响</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>(map2) <span class="comment">// 获取map长度</span></span><br></pre></td></tr></table></figure><blockquote><p>map是引用类型的数据类型</p></blockquote><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p>语法：””, ``</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 := <span class="string">"hello中国"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>(s1) <span class="comment">// 11 获取的是字节个数</span></span><br></pre></td></tr></table></figure><h2 id="strings包"><a href="#strings包" class="headerlink" title="strings包"></a>strings包</h2><p>使用string的方法需要导包<code>import &quot;strings&quot;</code></p><h2 id="strconv包"><a href="#strconv包" class="headerlink" title="strconv包"></a>strconv包</h2><p>实现字符串和基本数据类型进行转换</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;随机数&quot;&gt;&lt;a href=&quot;#随机数&quot; class=&quot;headerlink&quot; title=&quot;随机数&quot;&gt;&lt;/a&gt;随机数&lt;/h2&gt;&lt;p&gt;伪随机数&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;math/rand&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    num1 = rand.Int()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    num2 = rand.Intn(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rand.Seed(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 设置种子数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    num3 = rand.Intn(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 时间戳&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    timeStamp1 = time.Now().Unix()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    timeStamp2 = time.Now().UnixNano()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rand.Seed(timeStamp2) &lt;span class=&quot;comment&quot;&gt;// 根据时间戳设置随机种子&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 生成区间随机数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    num4 = rand.Intn(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://sudlivre.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://sudlivre.github.io/tags/Golang/"/>
    
      <category term="Golang Days" scheme="https://sudlivre.github.io/tags/Golang-Days/"/>
    
  </entry>
  
  <entry>
    <title>Python-排序算法</title>
    <link href="https://sudlivre.github.io/2019/09/28/Python-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://sudlivre.github.io/2019/09/28/Python-排序算法/</id>
    <published>2019-09-28T12:17:18.000Z</published>
    <updated>2019-09-28T12:18:44.615Z</updated>
    
    <content type="html"><![CDATA[<h2 id="顺序查找（Sequence-Search）"><a href="#顺序查找（Sequence-Search）" class="headerlink" title="顺序查找（Sequence Search）"></a>顺序查找（Sequence Search）</h2><p>顺序查找是按照序列原有顺序对数组进行遍历比较查询的基本查找算法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">seq_search</span><span class="params">(items, elem)</span>:</span></span><br><span class="line">    <span class="string">"""顺序查找"""</span></span><br><span class="line">    <span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(items):</span><br><span class="line">        <span class="keyword">if</span> item == elem:</span><br><span class="line">            <span class="keyword">return</span> index</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="二分查找-折半查找（Binary-Search）"><a href="#二分查找-折半查找（Binary-Search）" class="headerlink" title="二分查找/折半查找（Binary Search）"></a>二分查找/折半查找（Binary Search）</h2><p>二分查找是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin_search</span><span class="params">(items, elem)</span>:</span></span><br><span class="line">    <span class="string">"""折半查找(二分查找)"""</span></span><br><span class="line">    start, end = <span class="number">0</span>, len(items) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> start &lt;= end:</span><br><span class="line">        mid = (start + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> elem &lt; items[mid]: end = mid - <span class="number">1</span> <span class="keyword">elif</span> elem &gt; items[mid]:</span><br><span class="line">            start = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h2 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h2><p>冒泡排序是一种计算机科学领域的较简单的排序算法。它重复地走访过要排序的元素列，依次比较两个相邻的元素，如果他们的顺序（如从大到小、首字母从A到Z）错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素已经排序完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实现排序自定义，避免极端情况，正向逆向都比较一次</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(origin_items, *, comp=lambda x, y: x &gt; y)</span>:</span></span><br><span class="line">    <span class="string">"""冒泡排序"""</span></span><br><span class="line">    items = origin_items[:]</span><br><span class="line">    length = len(items)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, length):</span><br><span class="line">        swapped = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, length - i):</span><br><span class="line">            <span class="keyword">if</span> comp(items[j], items[j + <span class="number">1</span>]):</span><br><span class="line">                items[j], items[j + <span class="number">1</span>] = items[j + <span class="number">1</span>], items[j]</span><br><span class="line">                swapped = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> swapped:</span><br><span class="line">            swapped = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(length - i - <span class="number">1</span>, i - <span class="number">1</span>, <span class="number">-1</span>):</span><br><span class="line">                <span class="keyword">if</span> comp(items[j - <span class="number">1</span>], items[j]):</span><br><span class="line">                    items[j - <span class="number">1</span>], items[j] = items[j], items[j - <span class="number">1</span>]</span><br><span class="line">                    swapped = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> swapped:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> items</span><br></pre></td></tr></table></figure><h2 id="归并排序（Merge-Sort）"><a href="#归并排序（Merge-Sort）" class="headerlink" title="归并排序（Merge Sort）"></a>归并排序（Merge Sort）</h2><p>归并排序是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(list1, list2, comp=lambda x, y: x &lt;= y)</span>:</span></span><br><span class="line">    <span class="string">""""有序合并(将两个有序的列表合并成一个新的有序的列表)"""</span></span><br><span class="line">    list3 = []</span><br><span class="line">    index1, index2 = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index1 &lt; len(list1) <span class="keyword">and</span> index2 &lt; len(list2):</span><br><span class="line">        <span class="keyword">if</span> comp(list1[index1], list2[index2]):</span><br><span class="line">            list3.append(list1[index1])</span><br><span class="line">            index1 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            list3.append(list2[index2])</span><br><span class="line">            index2 += <span class="number">1</span></span><br><span class="line">    list3 += list1[index1:]</span><br><span class="line">    list3 += list2[index2:]</span><br><span class="line">    <span class="keyword">return</span> list3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(origin_items, comp=lambda x, y: x &lt;= y)</span>:</span></span><br><span class="line">    <span class="string">"""归并排序"""</span></span><br><span class="line">    <span class="keyword">if</span> len(origin_items) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> origin_items[:]</span><br><span class="line">    mid = len(origin_items) // <span class="number">2</span></span><br><span class="line">    left = merge_sort(origin_items[:mid], comp)</span><br><span class="line">    right = merge_sort(origin_items[mid:], comp)</span><br><span class="line">    <span class="keyword">return</span> merge(left, right, comp)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;顺序查找（Sequence-Search）&quot;&gt;&lt;a href=&quot;#顺序查找（Sequence-Search）&quot; class=&quot;headerlink&quot; title=&quot;顺序查找（Sequence Search）&quot;&gt;&lt;/a&gt;顺序查找（Sequence Search）&lt;/h2&gt;&lt;p&gt;顺序查找是按照序列原有顺序对数组进行遍历比较查询的基本查找算法。&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;seq_search&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(items, elem)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;顺序查找&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; index, item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; enumerate(items):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; item == elem:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; index&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://sudlivre.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://sudlivre.github.io/tags/Python/"/>
    
      <category term="Algorithm" scheme="https://sudlivre.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Python–zlib/hashlib/rsa</title>
    <link href="https://sudlivre.github.io/2019/09/28/Python%E2%80%93zlib-hashlib-rsa/"/>
    <id>https://sudlivre.github.io/2019/09/28/Python–zlib-hashlib-rsa/</id>
    <published>2019-09-28T12:11:21.000Z</published>
    <updated>2019-09-28T12:20:52.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="zlib-数据压缩解压缩库"><a href="#zlib-数据压缩解压缩库" class="headerlink" title="zlib-数据压缩解压缩库"></a>zlib-数据压缩解压缩库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_file</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'begin_file.txt'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># zlib.compress 用来压缩字符串的bytes类型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_zlib</span><span class="params">()</span>:</span></span><br><span class="line">    response = requests.get(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">    message = response.text</span><br><span class="line">    bytes_message = str.encode(message)</span><br><span class="line">    save_to_file(bytes_message)</span><br><span class="line">    compressed = zlib.compress(bytes_message, zlib.Z_BEST_COMPRESSION)</span><br><span class="line">    decompressed = zlib.decompress(compressed)</span><br><span class="line">    print(<span class="string">"original string:"</span>, len(message))</span><br><span class="line">    print(<span class="string">"original bytes:"</span>, len(bytes_message))</span><br><span class="line">    print(<span class="string">"compressed:"</span>, len(compressed))</span><br><span class="line">    print(<span class="string">"decompressed:"</span>, len(decompressed))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># zlib.compressobj 用来压缩数据流，用于文件传输</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_compress</span><span class="params">(begin_file, zlib_file, level)</span>:</span></span><br><span class="line">    infile = open(begin_file, <span class="string">"rb"</span>)</span><br><span class="line">    zfile = open(zlib_file, <span class="string">"wb"</span>)</span><br><span class="line">    compressobj = zlib.compressobj(level)</span><br><span class="line">    data = infile.read(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">while</span> data:</span><br><span class="line">        zfile.write(compressobj.compress(data))</span><br><span class="line">        <span class="comment"># 继续读取文件中的下一个size的内容</span></span><br><span class="line">        data = infile.read(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># compressobj.flush()包含剩余压缩输出的字节对象，将剩余的字节内容写入到目标文件中</span></span><br><span class="line">    zfile.write(compressobj.flush())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_decompress</span><span class="params">(zlib_file, end_file)</span>:</span></span><br><span class="line">    zlib_file = open(zlib_file, <span class="string">"rb"</span>)</span><br><span class="line">    end_file = open(end_file, <span class="string">"wb"</span>)</span><br><span class="line">    decompressobj = zlib.decompressobj()</span><br><span class="line">    data = zlib_file.read(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">while</span> data:</span><br><span class="line">        end_file.write(decompressobj.decompress(data))</span><br><span class="line">        data = zlib_file.read(<span class="number">1024</span>)</span><br><span class="line">    end_file.write(decompressobj.flush())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 测试字符串的压缩与解压</span></span><br><span class="line">    str_zlib()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试数据流压缩</span></span><br><span class="line">    begin_file = <span class="string">"./begin_file.txt"</span></span><br><span class="line">    zlib_file = <span class="string">"./zlib_file.txt"</span></span><br><span class="line">    level = <span class="number">9</span></span><br><span class="line">    file_compress(begin_file, zlib_file, level)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试数据流解压</span></span><br><span class="line">    zlib_file = <span class="string">"./zlib_file.txt"</span></span><br><span class="line">    end_file = <span class="string">"./end_file.txt"</span></span><br><span class="line">    file_decompress(zlib_file, end_file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="hashlib-哈希摘要生成器"><a href="#hashlib-哈希摘要生成器" class="headerlink" title="hashlib-哈希摘要生成器"></a>hashlib-哈希摘要生成器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha512</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamHasher</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""哈希摘要生成器"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, algorithm=<span class="string">'md5'</span>, size=<span class="number">1024</span>)</span>:</span></span><br><span class="line">        self.size = size</span><br><span class="line">        alg = algorithm.lower()</span><br><span class="line">        <span class="keyword">if</span> alg == <span class="string">'md5'</span>:</span><br><span class="line">            self.hasher = md5()</span><br><span class="line">        <span class="keyword">elif</span> alg == <span class="string">'sha1'</span>:</span><br><span class="line">            self.hasher = sha1()</span><br><span class="line">        <span class="keyword">elif</span> alg == <span class="string">'sha256'</span>:</span><br><span class="line">            self.hasher = sha256()</span><br><span class="line">        <span class="keyword">elif</span> alg == <span class="string">'sha512'</span>:</span><br><span class="line">            self.hasher = sha512()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'不支持指定的摘要算法'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 魔法方法: 让对象可以像函数一样被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, stream)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.to_digest(stream)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_digest</span><span class="params">(self, stream)</span>:</span></span><br><span class="line">        <span class="string">"""生成十六进制形式的哈希摘要字符串"""</span></span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> iter(<span class="keyword">lambda</span>: stream.read(self.size), <span class="string">b''</span>):</span><br><span class="line">            self.hasher.update(data)</span><br><span class="line">        <span class="keyword">return</span> self.hasher.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""主函数"""</span></span><br><span class="line">    hasher = StreamHasher(<span class="string">'sha1'</span>, <span class="number">4096</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'Python魔法方法指南.pdf'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> stream:</span><br><span class="line">        <span class="comment"># print(hasher.to_digest(stream))</span></span><br><span class="line">        print(hasher(stream))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="rsa-加密库"><a href="#rsa-加密库" class="headerlink" title="rsa-加密库"></a>rsa-加密库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成密钥</span></span><br><span class="line">(pubkey, privkey) = rsa.newkeys(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存密钥</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'public.pem'</span>, <span class="string">'w+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(pubkey.save_pkcs1().decode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'private.pem'</span>, <span class="string">'w+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(privkey.save_pkcs1().decode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入密钥</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'public.pem'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pubkey = rsa.PublicKey.load_pkcs1(f.read().encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'private.pem'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    privkey = rsa.PrivateKey.load_pkcs1(f.read().encode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 明文</span></span><br><span class="line">message = <span class="string">'zhezhendeshiyigemima'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 公钥加密</span></span><br><span class="line">crypto = rsa.encrypt(message.encode(), pubkey)</span><br><span class="line">print(crypto)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 私钥解密</span></span><br><span class="line">message = rsa.decrypt(crypto, privkey).decode()</span><br><span class="line">print(message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 私钥签名</span></span><br><span class="line">signature = rsa.sign(message.encode(), privkey, <span class="string">'SHA-1'</span>)</span><br><span class="line">print(signature)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公钥验证</span></span><br><span class="line">result = rsa.verify(message.encode(), signature, pubkey)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;zlib-数据压缩解压缩库&quot;&gt;&lt;a href=&quot;#zlib-数据压缩解压缩库&quot; class=&quot;headerlink&quot; title=&quot;zlib-数据压缩解压缩库&quot;&gt;&lt;/a&gt;zlib-数据压缩解压缩库&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; zlib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;save_to_file&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;string&quot;&gt;&#39;begin_file.txt&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;wb&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        f.write(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# zlib.compress 用来压缩字符串的bytes类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;str_zlib&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response = requests.get(&lt;span class=&quot;string&quot;&gt;&quot;https://www.baidu.com&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    message = response.text&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bytes_message = str.encode(message)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    save_to_file(bytes_message)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compressed = zlib.compress(bytes_message, zlib.Z_BEST_COMPRESSION)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    decompressed = zlib.decompress(compressed)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;original string:&quot;&lt;/span&gt;, len(message))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;original bytes:&quot;&lt;/span&gt;, len(bytes_message))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;compressed:&quot;&lt;/span&gt;, len(compressed))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;decompressed:&quot;&lt;/span&gt;, len(decompressed))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# zlib.compressobj 用来压缩数据流，用于文件传输&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;file_compress&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(begin_file, zlib_file, level)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    infile = open(begin_file, &lt;span class=&quot;string&quot;&gt;&quot;rb&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    zfile = open(zlib_file, &lt;span class=&quot;string&quot;&gt;&quot;wb&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compressobj = zlib.compressobj(level)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data = infile.read(&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        zfile.write(compressobj.compress(data))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 继续读取文件中的下一个size的内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data = infile.read(&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# compressobj.flush()包含剩余压缩输出的字节对象，将剩余的字节内容写入到目标文件中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    zfile.write(compressobj.flush())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;file_decompress&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(zlib_file, end_file)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    zlib_file = open(zlib_file, &lt;span class=&quot;string&quot;&gt;&quot;rb&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end_file = open(end_file, &lt;span class=&quot;string&quot;&gt;&quot;wb&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    decompressobj = zlib.decompressobj()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data = zlib_file.read(&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end_file.write(decompressobj.decompress(data))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data = zlib_file.read(&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end_file.write(decompressobj.flush())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 测试字符串的压缩与解压&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    str_zlib()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 测试数据流压缩&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    begin_file = &lt;span class=&quot;string&quot;&gt;&quot;./begin_file.txt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    zlib_file = &lt;span class=&quot;string&quot;&gt;&quot;./zlib_file.txt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    level = &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file_compress(begin_file, zlib_file, level)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 测试数据流解压&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    zlib_file = &lt;span class=&quot;string&quot;&gt;&quot;./zlib_file.txt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end_file = &lt;span class=&quot;string&quot;&gt;&quot;./end_file.txt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file_decompress(zlib_file, end_file)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    main()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://sudlivre.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://sudlivre.github.io/tags/Python/"/>
    
      <category term="Algorithm" scheme="https://sudlivre.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Windows Server 2012 R2 FTP Server</title>
    <link href="https://sudlivre.github.io/2019/09/28/Windows-Server-2012-R2-FTP-Server/"/>
    <id>https://sudlivre.github.io/2019/09/28/Windows-Server-2012-R2-FTP-Server/</id>
    <published>2019-09-28T08:52:20.000Z</published>
    <updated>2019-09-28T09:03:12.059Z</updated>
    
    <content type="html"><![CDATA[<p>打开Windows Server 2012 R2 <strong>服务器管理器界面</strong>  添加角色和功能</p><p><img src="../images/2019/20190320-001.png" alt="001"></p><p>添加角色和功能向导里，选择 从<strong>服务器池中选择服务器</strong></p><p><img src="../images/2019/20190320-002.png" alt="002"></p><p>选择Web 服务器（IIS）<strong>安装 FTP服务器</strong></p><p><img src="../images/2019/20190320-003.png" alt="003"></p><p>安装完成后，在服务器管理器右上角有个点击 “<strong>工具</strong>”–&gt;选择“<strong>IIS管理器</strong>”</p><p><img src="../images/2019/20190320-004.png" alt="004"></p><p>点击<strong>IIS 服务器证书</strong></p><p><img src="../images/2019/20190320-005.png" alt="005"></p><p>FTP界面上选择“<strong>FTP身份验证</strong>”——&gt;“<strong>基本身份验证</strong>”–&gt;”启用”</p><a id="more"></a><p><img src="../images/2019/20190320-006.png" alt="006"></p><p>FTP界面选择 “<strong>FTP授权规则</strong>“—&gt;右侧“<strong>添加允许规则</strong>”–&gt;选择“<strong>指定的角色或用户组</strong>”,以及权限选择，“<strong>读取 写入</strong></p><p><img src="../images/2019/20190320-007.png" alt="007"></p><p>完成所有前戏后，接下来就开始进行建立FTP网站，点击IIS管理器界面 “<strong>网站</strong>”，点击右侧添加“<strong>FTP站点</strong>”，FTP站点名称可以任意取，内容目录为服务器上提供上传、下载文件保存目录。</p><p><img src="../images/2019/20190320-008.png" alt="008"></p><p>点击“<strong>下一步</strong>”绑定IP可以选取指定IP，也可以默认，端口号默认21，勾选下面“<strong>自动启动FTP站点</strong>”导入刚才建立的SSL证书</p><p><img src="../images/2019/20190320-009.png" alt="009"></p><p>点击“<strong>下一步</strong>”身份验证和授权信息配置</p><p><img src="../images/2019/20190320-010.png" alt="010"></p><p>配置完成（浏览器和FTP客户端软件上登陆）</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ftp://<span class="title">ip</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 提示输入账户密码</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;打开Windows Server 2012 R2 &lt;strong&gt;服务器管理器界面&lt;/strong&gt;  添加角色和功能&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;../images/2019/20190320-001.png&quot; alt=&quot;001&quot;&gt;&lt;/p&gt;&lt;p&gt;添加角色和功能向导里，选择 从&lt;strong&gt;服务器池中选择服务器&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;../images/2019/20190320-002.png&quot; alt=&quot;002&quot;&gt;&lt;/p&gt;&lt;p&gt;选择Web 服务器（IIS）&lt;strong&gt;安装 FTP服务器&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;../images/2019/20190320-003.png&quot; alt=&quot;003&quot;&gt;&lt;/p&gt;&lt;p&gt;安装完成后，在服务器管理器右上角有个点击 “&lt;strong&gt;工具&lt;/strong&gt;”–&amp;gt;选择“&lt;strong&gt;IIS管理器&lt;/strong&gt;”&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;../images/2019/20190320-004.png&quot; alt=&quot;004&quot;&gt;&lt;/p&gt;&lt;p&gt;点击&lt;strong&gt;IIS 服务器证书&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;../images/2019/20190320-005.png&quot; alt=&quot;005&quot;&gt;&lt;/p&gt;&lt;p&gt;FTP界面上选择“&lt;strong&gt;FTP身份验证&lt;/strong&gt;”——&amp;gt;“&lt;strong&gt;基本身份验证&lt;/strong&gt;”–&amp;gt;”启用”&lt;/p&gt;
    
    </summary>
    
    
      <category term="Windows" scheme="https://sudlivre.github.io/categories/Windows/"/>
    
    
      <category term="FTP" scheme="https://sudlivre.github.io/tags/FTP/"/>
    
  </entry>
  
  <entry>
    <title>Golang基础语法之二</title>
    <link href="https://sudlivre.github.io/2019/09/28/Golang%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E4%BA%8C/"/>
    <id>https://sudlivre.github.io/2019/09/28/Golang基础语法之二/</id>
    <published>2019-09-28T08:41:18.000Z</published>
    <updated>2019-09-28T12:01:44.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h2><p>输出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Print() // 打印</span></span><br><span class="line"><span class="comment">Printf() // 格式化打印</span></span><br><span class="line"><span class="comment">Println() // 打印之后换行</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>输入：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">fmt.Scanln(&amp;x, &amp;y) 阻塞式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">fmt.Scanf("%d, %f", &amp;x, &amp;y)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">reader := bufio.NewReader(os.Stdin)</span></span><br><span class="line"><span class="comment">s, _ := reader.ReadString('\n')</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 布尔表达式<span class="number">1</span> &#123;</span><br><span class="line">    执行语句</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> 布尔表达式<span class="number">2</span> &#123;</span><br><span class="line">    执行语句</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    执行语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if语句其他写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> num := <span class="number">4</span>; num &gt; <span class="number">0</span> &#123;</span><br><span class="line">    fmt.Println(num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 作用域在if语句里面</span></span><br><span class="line"><span class="comment">// fmt.Println(num) // undefined: num</span></span><br></pre></td></tr></table></figure><h2 id="switch分支语句"><a href="#switch分支语句" class="headerlink" title="switch分支语句"></a>switch分支语句</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> var1 &#123;</span><br><span class="line">    <span class="keyword">case</span> val1:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> val2:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch其他写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> &#123; <span class="comment">// 直接作用在true上</span></span><br><span class="line">    <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">        fmt.Println(<span class="string">"true"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">        fmt.Println(<span class="string">"false"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> var1 &#123;</span><br><span class="line">    <span class="keyword">case</span> val1, val2, val3:</span><br><span class="line">        fmt.Println(<span class="string">"true"</span>)</span><br><span class="line">    <span class="keyword">case</span> val4:</span><br><span class="line">        fmt.Println(<span class="string">"false"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> var1 := <span class="string">"go"</span>; var1 &#123; <span class="comment">// 作用域在switch中</span></span><br><span class="line">    <span class="keyword">case</span> val1, val2, val3:</span><br><span class="line">        fmt.Println(<span class="string">"true"</span>)</span><br><span class="line">    <span class="keyword">case</span> val4:</span><br><span class="line">        fmt.Println(<span class="string">"false"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>fallthrough: 用于穿透switch，会执行该case后面case的内容，fallthrough在case最后一行</p></blockquote><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> init; condition; post &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for语句的其他写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> condition &#123;&#125; <span class="comment">// 相当与while循环</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> oldMap &#123;</span><br><span class="line">    newMap[key] = value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>break 跳出循环体</li><li>continue 跳出一次循环</li></ul><h2 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">goto</span> label</span><br><span class="line">..</span><br><span class="line">..</span><br><span class="line">label:</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;输入和输出&quot;&gt;&lt;a href=&quot;#输入和输出&quot; class=&quot;headerlink&quot; title=&quot;输入和输出&quot;&gt;&lt;/a&gt;输入和输出&lt;/h2&gt;&lt;p&gt;输出：&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;Print() // 打印&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;Printf() // 格式化打印&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;Println() // 打印之后换行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;输入：&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;fmt.Scanln(&amp;amp;x, &amp;amp;y) 阻塞式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;fmt.Scanf(&quot;%d, %f&quot;, &amp;amp;x, &amp;amp;y)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;reader := bufio.NewReader(os.Stdin)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;s, _ := reader.ReadString(&#39;\n&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://sudlivre.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://sudlivre.github.io/tags/Golang/"/>
    
      <category term="Golang Days" scheme="https://sudlivre.github.io/tags/Golang-Days/"/>
    
  </entry>
  
  <entry>
    <title>Golang基础语法之一</title>
    <link href="https://sudlivre.github.io/2019/09/28/Golang%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E4%B8%80/"/>
    <id>https://sudlivre.github.io/2019/09/28/Golang基础语法之一/</id>
    <published>2019-09-28T00:26:25.000Z</published>
    <updated>2019-09-28T08:40:04.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Start-golang"><a href="#Start-golang" class="headerlink" title="Start golang"></a>Start golang</h2><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello World"</span>)</span><br><span class="line">    <span class="comment">// Print 不换行</span></span><br><span class="line">    fmt.Print(<span class="string">"Go Go Go!!!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">go run</span><br><span class="line"></span><br><span class="line">go build</span><br><span class="line"></span><br><span class="line">go install</span><br></pre></td></tr></table></figure><h3 id="go-help"><a href="#go-help" class="headerlink" title="go help"></a>go help</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">go help</span><br><span class="line"></span><br><span class="line">The commands are:</span><br><span class="line"></span><br><span class="line">        bug         start a bug report</span><br><span class="line">        build       compile packages and dependencies</span><br><span class="line">        clean       remove object files and cached files</span><br><span class="line">        doc         show documentation for package or symbol</span><br><span class="line">        env         print Go environment information</span><br><span class="line">        fix         update packages to use new APIs</span><br><span class="line">        fmt         gofmt (reformat) package sources</span><br><span class="line">        generate    generate Go files by processing source</span><br><span class="line">        get         add dependencies to current module and install them</span><br><span class="line">        install     compile and install packages and dependencies</span><br><span class="line">        list        list packages or modules</span><br><span class="line">        mod         module maintenance</span><br><span class="line">        run         compile and run Go program</span><br><span class="line">        test        test packages</span><br><span class="line">        tool        run specified go tool</span><br><span class="line">        version     print Go version</span><br><span class="line">        vet         report likely mistakes in packages</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>静态语言：强类型语言</li><li>动态语言：弱类型语言</li></ul><p>go语言特性</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span></span><br><span class="line">num = <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">4</span></span><br><span class="line"><span class="comment">// 类型推断</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"string"</span></span><br><span class="line"><span class="comment">// 简短定义</span></span><br><span class="line">num := <span class="number">100</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>变量必须先定义才能使用。</li><li>变量的类型和赋值必须一致。</li><li>同一个作用域内，变量名不能冲突。</li><li>简短定义方式，左边的变量名至少有一个是新的。</li><li>简短定义的方式，不能定义全局变量。</li><li>变量的零值。也叫默认值。</li><li>变量定义了就要使用否则无法通过编译。</li></ul></blockquote><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显式类型定义</span></span><br><span class="line"><span class="keyword">const</span> b <span class="keyword">string</span> = “abc”</span><br><span class="line"><span class="comment">// 隐式类型定义</span></span><br><span class="line"><span class="keyword">const</span> b = “abc”</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a <span class="keyword">int</span> = <span class="number">100</span></span><br><span class="line">    b</span><br><span class="line">    c <span class="keyword">string</span> = <span class="string">"go"</span></span><br><span class="line">    d</span><br><span class="line">    e</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>一组常量中，如果某个常量没有初始值，默认和上一行一致</p></blockquote><h3 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="literal">iota</span> <span class="comment">// 0</span></span><br><span class="line">    b = <span class="literal">iota</span> <span class="comment">// 1</span></span><br><span class="line">    c = <span class="literal">iota</span> <span class="comment">// 2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>基本数据类型：</p><ul><li>布尔类型</li><li>数值类型</li><li>字符串</li></ul><p>符合数据类型：</p><ul><li>array</li><li>slice</li><li>map</li><li>function</li><li>pointer</li><li>struct</li><li>interface</li><li>channel</li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符  —  / &amp;&amp; / || / ! /</li><li>位运算符 / 按位&amp; / 按位| / 异或^ / 位清空&amp;^ / 左移运算&lt;&lt; / 右移运算 &gt;&gt; /  </li><li>赋值运算符</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Start-golang&quot;&gt;&lt;a href=&quot;#Start-golang&quot; class=&quot;headerlink&quot; title=&quot;Start golang&quot;&gt;&lt;/a&gt;Start golang&lt;/h2&gt;&lt;h3 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Print 不换行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Print(&lt;span class=&quot;string&quot;&gt;&quot;Go Go Go!!!&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://sudlivre.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://sudlivre.github.io/tags/Golang/"/>
    
      <category term="Golang Days" scheme="https://sudlivre.github.io/tags/Golang-Days/"/>
    
  </entry>
  
  <entry>
    <title>Automatic Remote Desktop</title>
    <link href="https://sudlivre.github.io/2019/09/27/Automatic-Remote-Desktop/"/>
    <id>https://sudlivre.github.io/2019/09/27/Automatic-Remote-Desktop/</id>
    <published>2019-09-27T14:23:47.000Z</published>
    <updated>2019-09-28T08:48:29.517Z</updated>
    
    <content type="html"><![CDATA[<p>Based on Windows Server 2012</p><h3 id="premise"><a href="#premise" class="headerlink" title="premise"></a>premise</h3><ul><li>remote machine need open winrm service</li><li>base host need PsExec.exe for start up display</li></ul><h3 id="bat-script"><a href="#bat-script" class="headerlink" title="bat script"></a>bat script</h3><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">REM Skip popup</span></span><br><span class="line">REG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Terminal Server Client" /v AuthenticationLevelOverride /t REG_DWORD /d <span class="number">0</span> /f</span><br><span class="line"><span class="comment">REM Modify group policy</span></span><br><span class="line">REG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation\AllowSavedCredentialsWhenNTLMOnly" /v 1 /t RED_SZ /d TERMSRV/* /f</span><br><span class="line"><span class="comment">REM Update group policy</span></span><br><span class="line">gpupdate /force</span><br><span class="line"><span class="comment">REM Add login credentials</span></span><br><span class="line">CMDKEY /add:remote_ip /user:user /pass:password</span><br><span class="line"><span class="comment">REM Remote desktop</span></span><br><span class="line">MSTSC /v:remote_ip:remote_port</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="start-the-script-by-command"><a href="#start-the-script-by-command" class="headerlink" title="start the script by command"></a>start the script by command</h3><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PsExec.exe \\ip -accepteula -u user -p password -i <span class="built_in">cmd</span></span><br></pre></td></tr></table></figure><p>or use <code>query user</code> find ID</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PsExec.exe \\ip -accepteula -u user -p password -i ID <span class="built_in">cmd</span></span><br></pre></td></tr></table></figure><h3 id="About-wmic"><a href="#About-wmic" class="headerlink" title="About wmic"></a>About wmic</h3><p>open remote desktop service</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic /node:"[full machine name]" /USER:"[domain]\[username]" <span class="built_in">PATH</span> win32_terminalservicesetting WHERE (__Class!="") <span class="keyword">CALL</span> SetAllowTSConnections <span class="number">1</span></span><br></pre></td></tr></table></figure><p>use wmic open remote process</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic /node:ip /user:"administrator" /password:"password" process <span class="keyword">call</span> create commandline="command"</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Based on Windows Server 2012&lt;/p&gt;&lt;h3 id=&quot;premise&quot;&gt;&lt;a href=&quot;#premise&quot; class=&quot;headerlink&quot; title=&quot;premise&quot;&gt;&lt;/a&gt;premise&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;remote machine need open winrm service&lt;/li&gt;
&lt;li&gt;base host need PsExec.exe for start up display&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;bat-script&quot;&gt;&lt;a href=&quot;#bat-script&quot; class=&quot;headerlink&quot; title=&quot;bat script&quot;&gt;&lt;/a&gt;bat script&lt;/h3&gt;&lt;figure class=&quot;highlight bat&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;REM Skip popup&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;REG ADD &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Terminal Server Client&quot; /v AuthenticationLevelOverride /t REG_DWORD /d &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; /f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;REM Modify group policy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;REG ADD &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation\AllowSavedCredentialsWhenNTLMOnly&quot; /v 1 /t RED_SZ /d TERMSRV/* /f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;REM Update group policy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpupdate /force&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;REM Add login credentials&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CMDKEY /add:remote_ip /user:user /pass:password&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;REM Remote desktop&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MSTSC /v:remote_ip:remote_port&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Windows" scheme="https://sudlivre.github.io/categories/Windows/"/>
    
    
      <category term="PsExec" scheme="https://sudlivre.github.io/tags/PsExec/"/>
    
      <category term="bat" scheme="https://sudlivre.github.io/tags/bat/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://sudlivre.github.io/2019/09/27/hello-world/"/>
    <id>https://sudlivre.github.io/2019/09/27/hello-world/</id>
    <published>2019-09-27T11:13:06.796Z</published>
    <updated>2019-09-28T09:03:53.626Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
