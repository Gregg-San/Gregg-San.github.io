<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Golang进阶实战之并发]]></title>
    <url>%2F2019%2F10%2F03%2FGolang%E8%BF%9B%E9%98%B6%E5%AE%9E%E6%88%98%E4%B9%8B%E5%B9%B6%E5%8F%91%2F</url>
    <content type="text"><![CDATA[go1234567891011121314func main() &#123; // goroutine // 关键字go 主goroutine，子goroutine结束 go printNum() for i := 1; i &lt; 100; i++ &#123; fmt.Println("main:", i) &#125;&#125;func printNum() &#123; for i := 1; i &lt; 100; i++ &#123; fmt.Println("child: ", i) &#125;&#125; 并发模型GPM runtime包临界资源安全var wg sync.WaitGroup // 创建同步等待组对象 Add Wait Done 互斥锁var mutex sync.Mutex // 创建锁 Lock UnLock 读写锁 读操作可以同时进行 写操作不可以同时进行，啥也不能干，不能读也不能写 channel通道实现goroutine之间通信 非缓冲通道1234ch1 := make(chan int)ch1 &lt;- 2 // 写data := &lt;- ch1 // 读// 读写都是阻塞的，读写时对应的。不然会死锁 close(ch1) // 关闭通道 可以使用for ... range ch1访问通道 缓冲通道 发送：缓冲区数据满了，才会阻塞 接收：缓冲区数据空了，才会阻塞 ch2 := make(chan int, 5) 读取类似队列 单向通道123ch2 := make(chan &lt;- int) // 只能写ch2 := make(&lt;- chan int) // 只能读// 一般用在函数中限制只读，只写]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Golang Days</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Golang进阶实战之IO操作]]></title>
    <url>%2F2019%2F10%2F03%2FGolang%E8%BF%9B%E9%98%B6%E5%AE%9E%E6%88%98%E4%B9%8BIO%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[文件读写12345678910111213141516171819202122232425262728293031323334func main() &#123; // file文件操作 fileInfo, err := os.Stat("aaa.txt") if err != nil &#123; fmt.Println("error") return &#125; fmt.Println(fileInfo) fmt.Println(fileInfo.Name()) fmt.Println(fileInfo.Size()) fmt.Println(fileInfo.IsDir()) // 文件权限 fmt.Println(fileInfo.Mode()) fmt.Println(fileInfo.ModTime()) // 路径 fileName1 := "aaa.txt" fmt.Println(filepath.Abs(fileName1)) fmt.Println(filepath.IsAbs(fileName1)) // 创建目录 err = os.MkdirAll("aa", os.ModePerm) if err != nil &#123; fmt.Println("error") return &#125; // 创建Create 打开Open OpenFile 关闭Close 删除Remove RemoveAll file, err2 := os.Create("fileName2.txt") if err2 != nil &#123; fmt.Println("error") return &#125; fmt.Println(file)&#125; 数据读写1234567891011121314151617181920212223242526272829303132333435363738394041424344454647func main() &#123; // io // 读取数据: Read file, err := os.Open("aaa.txt") if err != nil &#123; return &#125; defer file.Close() bs := make([]byte, 4, 4) //n, err := file.Read(bs) //println(err) //println(n) //println(string(bs)) // //n, err = file.Read(bs) //println(err) //println(n) //println(string(bs)) // //n, err = file.Read(bs) //println(err) //println(n) //println(string(bs)) n := -1 for &#123; n, err = file.Read(bs) if n == 0 || err == io.EOF &#123; break &#125; fmt.Println(string(bs[:n])) &#125; // 写入数据: Write file2, err2 := os.OpenFile("bbb.txt", os.O_CREATE|os.O_WRONLY|os.O_APPEND, os.ModePerm) if err2 != nil &#123; return &#125; defer file2.Close() bs2 := []byte&#123;44,55,66&#125; n2, err4 := file2.Write(bs2) if err4 != nil &#123; return &#125; fmt.Println(n2)&#125; io相关123456789101112131415func main() &#123; // copy // 可以用Read和Write利用切片实现复制文件 // io.Copy() // ioutil.ReadFile() ioutil.WriteFile() // Seek接口设置读写文件偏移量 // 断点续传 ；利用临时文件记录传输了多少数据 // bufio 添加缓冲区 提高io效率 // buifo.NewReader(file) // Flush() 刷新缓冲区&#125;]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Golang Days</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Golang基础语法之六]]></title>
    <url>%2F2019%2F09%2F30%2FGolang%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%85%AD%2F</url>
    <content type="text"><![CDATA[type关键字定义类型12345678910111213141516// 定义新的类型type myint inttype mystr string// 定义函数类型type myfun func(int, int)(string)func fun1()myfun&#123;&#125;// 类型别名type bieming = Type// 别名不能添加本地方法，除非使用type定义新的类型（不使用等号）// 别名嵌套注意混淆 错误处理创建错误1234if err != nil &#123; log.Fatal(err) return&#125; 使用errors包的New函数创建错误 使用fmt包下的Errorf函数创建错误 错误类型断言，然后获取错误信息 错误不要忽略 自定义错误实现error接口, 实现方式如文档五所示 panic和recoverpanic恐慌 恐慌后的代码不执行，已经defer的代码会执行 123456func funcA() &#123; fmt.Println("a")&#125;func funcB() &#123;&#125; recover 捕获panic 12345defer func() &#123; if msg := recover; msg!=nil &#123; fmt.Println("恢复主函数") &#125;&#125;() 适合panic场景： 空指针引用 下标越界 除数为0 不应该出现的分支，比如default 输入不应该引起函数错误]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Golang Days</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Golang基础语法之五]]></title>
    <url>%2F2019%2F09%2F29%2FGolang%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E4%BA%94%2F</url>
    <content type="text"><![CDATA[指针定义指针1234567a := 10 // 实际变量var b *int // 声名指针变量b = &amp;a // 指针变量指向a的内存地址// 指针的指针var c **intc = &amp;b数组指针数组指针：存储数组的地址*[4]int指针数组：存储的数据类型是指针[4]*int函数指针 函数指针：函数默认是一个指针，没有* 指针函数：函数的返回值是一个指针 结构体定义结构体123456789101112131415161718type Person struct &#123; name string age int sex string address string&#125;var p1 = Personp1.name = "xiaosi"p1.age = 24p1.sex = "girl"p1.address = "cq"p2 := Person&#123;&#125;p3 := Person&#123;name: "jjj", ...&#125;p4 := Person&#123;"jj", 24, "girl", "cq"&#125; 结构体指针结构体是值类型数据结构， 深拷贝 可以定义结构体指针进行浅拷贝var pp1 *Person new操作创建某种类型的指针的函数，p1 := new(Person) 返回指针 匿名结构体1234567s3 := struct &#123; name string age int&#125;&#123; name "xs" age 24&#125; 匿名字段不写字段名，默认类型作为字段，类型不能重复 结构体嵌套一个结构体中的字段，是另一个结构体类型 面向对象面向对象：OOP Golang的结构体嵌套： 模拟继承性：is - a 匿名字段：Person 模拟聚合关系 has - a 例如字段：p Person 123456789type Person struct &#123; name string age int&#125;type Student struct &#123; Person // 结构体作为匿名字段 Person字段可作为提升字段，可以直接获取属性和方法 school string&#125; 方法一个方法就是一个包含了接受者的函数，接受者可以是命名类型或者结构体类型的一个值或者是一个指针。所有给定类型的方法属于该类型的方法集。 语法同函数类似，区别需要有接受者。 方法定义1234567891011121314151617type Work struct &#123; name string age int sex string&#125;// 定义方法func (w Worker) work () &#123; fmt.Println(w.name, "is working")&#125;func (p *Worker) rest() &#123; fmt.Println(p.name, "is sleeping")&#125;w1 := Worker&#123;"xs", 24, "girl"&#125;w1.work() 继承性和方法重写 接口接口是一组方法的签名接口和类型的实现关系，是非侵入式 当需要接口类型的对象时，可以使用任意实现类对象代替 接口对象不能访问实现类中的属性 12345678910111213141516171819202122232425262728293031323334// define interfacetype USB interface &#123; start() end()&#125;// define structtype Mouse struct &#123; name string&#125;type FlashDisk struct &#123; name string&#125;// define methodfunc (m Mouse)start() &#123; fmt.Println("sss")&#125;func (m Mouse)end() &#123; ftm.Println("qqq")&#125;func (f FlashDisk)start() &#123; fmt.Println("sss")&#125;func (f FlashDisk)end() &#123; ftm.Println("qqq")&#125;// testfunc testInterface(usb USB) &#123; usb.start() usb.end()&#125; 多态：一个事物的多种形态，Golang通过接口模拟多态 就一个接口而言 看成实现本身的类型，能够访问是想类中的属性和方法 看成是对应接口的类型，那就只能访问接口中方法 接口的用法： 一个函数如果接受接口类型作为参数，那么实际上可以传入该接口的任意实现类型对象作为参数 定义一个类型为接口类型，实际上可以赋值为任意实现类的对象 鸭子类型： 空接口1234type A interface &#123;&#125;// fmt包下面的Print系列函数就是空接口实现的 结合slice和map存储不同类型的数据 接口嵌套1234567891011type A interface &#123; test1()&#125;type B interface &#123; test2()&#125;type C interface &#123; // 如果要实现接口C，那么接口A和接口B的方法都要实现 A B test3()&#125; 接口断言1234567891011121314151617181920212223242526type Shape interface &#123; peri() float64 area float64&#125;type Triangle struct &#123; a,b,c float64&#125;func (t Triangle) peri() float64 &#123; return t.a + t.b + t.c&#125;func (t Triangle) area ()float64 &#123; p = t.peri() / 2 s := math.Sqrt(p*(p-t.a)*(p-t.b)*(p-t.c))&#125;func getType(s Shape) &#123; // 断言 判断s的实际类型 if ins, ok := s.(Triangle); ok &#123; fmt.Println("is triangle") &#125;&#125;func getType2 (s Shape) &#123; switch ins := s.(type) &#123; case Triangle: fmt.Println("is Triangle") &#125;&#125;]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Golang Days</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Golang基础语法之四]]></title>
    <url>%2F2019%2F09%2F29%2FGolang%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%9B%9B%2F</url>
    <content type="text"><![CDATA[函数函数定义123456// 声明func FuncName() &#123; return&#125;// 调用FuncName()函数调用的实参和形参必须一一对应，顺序，个数，类型可变参数123456789func myFunc(arg ...int) &#123; for _, n := range arg &#123; fmt.Println(n) &#125;&#125;myFunc(2,3,4)s1 := []int&#123;1,2,34,5&#125;myFunc(s1...) 参数传递 值传递 传递的是参数的副本 引用传递 传递的是参数的地址 函数中变量的作用域作用域在函数中 defer延迟函数或者方法的执行，等待外围函数执行完在执行defer中的内容。 如果存在多个defer，执行defer依据类似栈结构，先进后出。 defer函数调用时，函数的参数已经传递。 当外围函数中的语句正常执行完毕时，只有其中所有的延迟函数都执行完毕，外围函数才会真正的结束执行。 当执行外围函数中的return语句时，只有其中所有的延迟函数都执行完毕后，外围函数才会真正返回。当外围函数中的代码引发运行恐慌时，只有其中所有延迟函数都执行完毕后，该运行时恐慌才会被扩展至调用函数。 匿名函数Golang支持函数式编程 1234567func () &#123; fmt.Println("aaa")&#125;()func3 = func () &#123; fmt.Println("aaa")&#125; 回调函数函数作为另一个函数的参数，发生调用。 闭包一个外层函数中，有内层函数，该内层函数中，会操作外层函数的局部变量，并且该外层函数的返回值就是这个内层函数。 这个内层函数和外层函数的局部变量，统称为闭包结构。 局部变量的生命周期会发生改变，正常的局部变量随着函数的调用而创建，随着函数的结束而销毁。但闭包结构不会随着函数的结束而销毁，因为内层函数还要继续使用。]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Golang Days</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Golang基础语法之三]]></title>
    <url>%2F2019%2F09%2F29%2FGolang%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E4%B8%89%2F</url>
    <content type="text"><![CDATA[随机数伪随机数1234567891011121314151617181920package mainimport "math/rand"import "time"func main() &#123; num1 = rand.Int() num2 = rand.Intn(10) rand.Seed(1) // 设置种子数 num3 = rand.Intn(10) // 时间戳 timeStamp1 = time.Now().Unix() timeStamp2 = time.Now().UnixNano() rand.Seed(timeStamp2) // 根据时间戳设置随机种子 // 生成区间随机数 num4 = rand.Intn(5) + 5&#125; Array数组定义1234567891011var variable_name [SIZE] variable_typevar balance1 [10] float 32var balance2 = [5] floart32&#123;100.0, 2.0, 3.14, 7.0, 99.9&#125;d := [...] int&#123;1,2,3&#125;e := [5] int&#123;4: 100&#125; // [0,0,0,0,100]arrayLen := len(balance1) // 容器中已存储的数据量arrayCap := cap(balance1) // 容器中能够存储的最大的数量fmt.Printf("%p\n", &amp;balance1) // 获取数组的地址 遍历数组1234a := [...]float64&#123;5.5, 6.6&#125;for i, v := range a &#123; fmt.Println(i, v)&#125; 数组是值类型 理解为存储的数值本身 多维数组1a2 := [3][4]int&#123;&#123;1,2,3,4&#125;, &#123;5,6,7,8&#125;, &#123;9,10,11,12&#125;&#125; Slice切片定义12345678var identifier []typevar slice1 []type = make([]type, len)// 简写slice2 := make([]type, len)slice2 = append(slice2, 3, 4)slice2 = append(slice2, slice1...) // 加上...代表添加里面的元素 可以从数组初始化切片，切片是引用类型，改变数组内容，切片内容会一起改变。如果切片容量不够，会重新拷贝一份数组，这是数组改变不会影响切片内容。 深拷贝和浅拷贝 值语义 拷贝值 深拷贝 引用语义 拷贝地址 浅拷贝 MapMap通过hash表实现 使用make()函数创建，方法类似Slice。不初始化会创建一个nil map。nil map不能用来存放键值对 1234567891011var map1 map[key_type]value_type // 声明var map2 = make(map[key_type]value_type) // 声明并初始化map2[40] // key不存在获取默认值value, ok := map[key] // 判断key是否存在map[3] = 40 // key存在修改，不存在添加delete(map2, 4) // 删除键值对，不存在不影响len(map2) // 获取map长度 map是引用类型的数据类型 string语法：””, `` 123s1 := "hello中国"len(s1) // 11 获取的是字节个数 strings包使用string的方法需要导包import &quot;strings&quot; strconv包实现字符串和基本数据类型进行转换]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Golang Days</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python-排序算法]]></title>
    <url>%2F2019%2F09%2F28%2FPython-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[顺序查找（Sequence Search）顺序查找是按照序列原有顺序对数组进行遍历比较查询的基本查找算法。123456def seq_search(items, elem): """顺序查找""" for index, item in enumerate(items): if item == elem: return index return -1 二分查找/折半查找（Binary Search）二分查找是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。 12345678910def bin_search(items, elem): """折半查找(二分查找)""" start, end = 0, len(items) - 1 while start &lt;= end: mid = (start + end) // 2 if elem &lt; items[mid]: end = mid - 1 elif elem &gt; items[mid]: start = mid + 1 else: return mid return -1 冒泡排序（Bubble Sort）冒泡排序是一种计算机科学领域的较简单的排序算法。它重复地走访过要排序的元素列，依次比较两个相邻的元素，如果他们的顺序（如从大到小、首字母从A到Z）错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素已经排序完成。 1234567891011121314151617181920# 实现排序自定义，避免极端情况，正向逆向都比较一次def bubble_sort(origin_items, *, comp=lambda x, y: x &gt; y): """冒泡排序""" items = origin_items[:] length = len(items) for i in range(1, length): swapped = False for j in range(0, length - i): if comp(items[j], items[j + 1]): items[j], items[j + 1] = items[j + 1], items[j] swapped = True if swapped: swapped = False for j in range(length - i - 1, i - 1, -1): if comp(items[j - 1], items[j]): items[j - 1], items[j] = items[j], items[j - 1] swapped = True if not swapped: break return items 归并排序（Merge Sort）归并排序是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。 123456789101112131415161718192021222324def merge(list1, list2, comp=lambda x, y: x &lt;= y): """"有序合并(将两个有序的列表合并成一个新的有序的列表)""" list3 = [] index1, index2 = 0, 0 while index1 &lt; len(list1) and index2 &lt; len(list2): if comp(list1[index1], list2[index2]): list3.append(list1[index1]) index1 += 1 else: list3.append(list2[index2]) index2 += 1 list3 += list1[index1:] list3 += list2[index2:] return list3def merge_sort(origin_items, comp=lambda x, y: x &lt;= y): """归并排序""" if len(origin_items) &lt; 2: return origin_items[:] mid = len(origin_items) // 2 left = merge_sort(origin_items[:mid], comp) right = merge_sort(origin_items[mid:], comp) return merge(left, right, comp)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python–zlib/hashlib/rsa]]></title>
    <url>%2F2019%2F09%2F28%2FPython%E2%80%93zlib-hashlib-rsa%2F</url>
    <content type="text"><![CDATA[zlib-数据压缩解压缩库123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566import zlibimport requestsdef save_to_file(data): with open('begin_file.txt', 'wb') as f: f.write(data)# zlib.compress 用来压缩字符串的bytes类型def str_zlib(): response = requests.get("https://www.baidu.com") message = response.text bytes_message = str.encode(message) save_to_file(bytes_message) compressed = zlib.compress(bytes_message, zlib.Z_BEST_COMPRESSION) decompressed = zlib.decompress(compressed) print("original string:", len(message)) print("original bytes:", len(bytes_message)) print("compressed:", len(compressed)) print("decompressed:", len(decompressed))# zlib.compressobj 用来压缩数据流，用于文件传输def file_compress(begin_file, zlib_file, level): infile = open(begin_file, "rb") zfile = open(zlib_file, "wb") compressobj = zlib.compressobj(level) data = infile.read(1024) while data: zfile.write(compressobj.compress(data)) # 继续读取文件中的下一个size的内容 data = infile.read(1024) # compressobj.flush()包含剩余压缩输出的字节对象，将剩余的字节内容写入到目标文件中 zfile.write(compressobj.flush())def file_decompress(zlib_file, end_file): zlib_file = open(zlib_file, "rb") end_file = open(end_file, "wb") decompressobj = zlib.decompressobj() data = zlib_file.read(1024) while data: end_file.write(decompressobj.decompress(data)) data = zlib_file.read(1024) end_file.write(decompressobj.flush())def main(): # 测试字符串的压缩与解压 str_zlib() # 测试数据流压缩 begin_file = "./begin_file.txt" zlib_file = "./zlib_file.txt" level = 9 file_compress(begin_file, zlib_file, level) # 测试数据流解压 zlib_file = "./zlib_file.txt" end_file = "./end_file.txt" file_decompress(zlib_file, end_file)if __name__ == "__main__": main() hashlib-哈希摘要生成器1234567891011121314151617181920212223242526272829303132333435363738394041424344from hashlib import md5from hashlib import sha1from hashlib import sha256from hashlib import sha512class StreamHasher(): """哈希摘要生成器""" def __init__(self, algorithm='md5', size=1024): self.size = size alg = algorithm.lower() if alg == 'md5': self.hasher = md5() elif alg == 'sha1': self.hasher = sha1() elif alg == 'sha256': self.hasher = sha256() elif alg == 'sha512': self.hasher = sha512() else: raise ValueError('不支持指定的摘要算法') # 魔法方法: 让对象可以像函数一样被调用 def __call__(self, stream): return self.to_digest(stream) def to_digest(self, stream): """生成十六进制形式的哈希摘要字符串""" for data in iter(lambda: stream.read(self.size), b''): self.hasher.update(data) return self.hasher.hexdigest()def main(): """主函数""" hasher = StreamHasher('sha1', 4096) with open('Python魔法方法指南.pdf', 'rb') as stream: # print(hasher.to_digest(stream)) print(hasher(stream))if __name__ == '__main__': main() rsa-加密库12345678910111213141516171819202122232425262728293031323334353637import rsa# 生成密钥(pubkey, privkey) = rsa.newkeys(1024)# 保存密钥with open('public.pem', 'w+') as f: f.write(pubkey.save_pkcs1().decode())with open('private.pem', 'w+') as f: f.write(privkey.save_pkcs1().decode())# 导入密钥with open('public.pem', 'r') as f: pubkey = rsa.PublicKey.load_pkcs1(f.read().encode())with open('private.pem', 'r') as f: privkey = rsa.PrivateKey.load_pkcs1(f.read().encode())# 明文message = 'zhezhendeshiyigemima'# 公钥加密crypto = rsa.encrypt(message.encode(), pubkey)print(crypto)# 私钥解密message = rsa.decrypt(crypto, privkey).decode()print(message)# 私钥签名signature = rsa.sign(message.encode(), privkey, 'SHA-1')print(signature)# 公钥验证result = rsa.verify(message.encode(), signature, pubkey)print(result)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows Server 2012 R2 FTP Server]]></title>
    <url>%2F2019%2F09%2F28%2FWindows-Server-2012-R2-FTP-Server%2F</url>
    <content type="text"><![CDATA[打开Windows Server 2012 R2 服务器管理器界面 添加角色和功能添加角色和功能向导里，选择 从服务器池中选择服务器选择Web 服务器（IIS）安装 FTP服务器安装完成后，在服务器管理器右上角有个点击 “工具”–&gt;选择“IIS管理器”点击IIS 服务器证书FTP界面上选择“FTP身份验证”——&gt;“基本身份验证”–&gt;”启用” FTP界面选择 “FTP授权规则“—&gt;右侧“添加允许规则”–&gt;选择“指定的角色或用户组”,以及权限选择，“读取 写入 完成所有前戏后，接下来就开始进行建立FTP网站，点击IIS管理器界面 “网站”，点击右侧添加“FTP站点”，FTP站点名称可以任意取，内容目录为服务器上提供上传、下载文件保存目录。 点击“下一步”绑定IP可以选取指定IP，也可以默认，端口号默认21，勾选下面“自动启动FTP站点”导入刚才建立的SSL证书 点击“下一步”身份验证和授权信息配置 配置完成（浏览器和FTP客户端软件上登陆） 123ftp://ip# 提示输入账户密码]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>FTP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Golang基础语法之二]]></title>
    <url>%2F2019%2F09%2F28%2FGolang%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[输入和输出输出：12345/*Print() // 打印Printf() // 格式化打印Println() // 打印之后换行*/输入：12345678/*fmt.Scanln(&amp;x, &amp;y) 阻塞式fmt.Scanf("%d, %f", &amp;x, &amp;y)reader := bufio.NewReader(os.Stdin)s, _ := reader.ReadString('\n')*/ if语句1234567if 布尔表达式1 &#123; 执行语句&#125; else if 布尔表达式2 &#123; 执行语句&#125; else &#123; 执行语句&#125; if语句其他写法 12345if num := 4; num &gt; 0 &#123; fmt.Println(num)&#125;// 作用域在if语句里面// fmt.Println(num) // undefined: num switch分支语句12345678switch var1 &#123; case val1: ... case val2: ... default: ...&#125; switch其他写法 1234567891011121314151617181920switch &#123; // 直接作用在true上 case true: fmt.Println("true") case false: fmt.Println("false")&#125;switch var1 &#123; case val1, val2, val3: fmt.Println("true") case val4: fmt.Println("false")&#125;switch var1 := "go"; var1 &#123; // 作用域在switch中 case val1, val2, val3: fmt.Println("true") case val4: fmt.Println("false")&#125; fallthrough: 用于穿透switch，会执行该case后面case的内容，fallthrough在case最后一行 for循环123for init; condition; post &#123;&#125; for语句的其他写法 1234567for condition &#123;&#125; // 相当与while循环for &#123;&#125;for key, value := range oldMap &#123; newMap[key] = value&#125; break 跳出循环体 continue 跳出一次循环 goto1234goto label....label:]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Golang Days</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Golang基础语法之一]]></title>
    <url>%2F2019%2F09%2F28%2FGolang%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E4%B8%80%2F</url>
    <content type="text"><![CDATA[Start golangHello World123456789package mainimport "fmt"func main() &#123; fmt.Println("Hello World") // Print 不换行 fmt.Print("Go Go Go!!!")&#125; Run12345go rungo buildgo install go help123456789101112131415161718192021go helpThe commands are: bug start a bug report build compile packages and dependencies clean remove object files and cached files doc show documentation for package or symbol env print Go environment information fix update packages to use new APIs fmt gofmt (reformat) package sources generate generate Go files by processing source get add dependencies to current module and install them install compile and install packages and dependencies list list packages or modules mod module maintenance run compile and run Go program test test packages tool run specified go tool version print Go version vet report likely mistakes in packages 变量 静态语言：强类型语言 动态语言：弱类型语言 go语言特性 1234567var num intnum = 3var num2 = 4// 类型推断var name = "string"// 简短定义num := 100 变量必须先定义才能使用。 变量的类型和赋值必须一致。 同一个作用域内，变量名不能冲突。 简短定义方式，左边的变量名至少有一个是新的。 简短定义的方式，不能定义全局变量。 变量的零值。也叫默认值。 变量定义了就要使用否则无法通过编译。 常量123456789101112// 显式类型定义const b string = “abc”// 隐式类型定义const b = “abc”const ( a int = 100 b c string = "go" d e) 一组常量中，如果某个常量没有初始值，默认和上一行一致 iota12345const ( a = iota // 0 b = iota // 1 c = iota // 2) 数据类型基本数据类型： 布尔类型 数值类型 字符串 符合数据类型： array slice map function pointer struct interface channel 运算符 算术运算符 关系运算符 逻辑运算符 — / &amp;&amp; / || / ! / 位运算符 / 按位&amp; / 按位| / 异或^ / 位清空&amp;^ / 左移运算&lt;&lt; / 右移运算 &gt;&gt; / 赋值运算符]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Golang Days</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows Automatic Remote Desktop]]></title>
    <url>%2F2019%2F09%2F27%2FWindows-Automatic-Remote-Desktop%2F</url>
    <content type="text"><![CDATA[Based on Windows Server 2012premise remote machine need open winrm service base host need PsExec.exe for start up display bat script12345678910REM Skip popupREG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Terminal Server Client" /v AuthenticationLevelOverride /t REG_DWORD /d 0 /fREM Modify group policyREG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation\AllowSavedCredentialsWhenNTLMOnly" /v 1 /t RED_SZ /d TERMSRV/* /fREM Update group policygpupdate /forceREM Add login credentialsCMDKEY /add:remote_ip /user:user /pass:passwordREM Remote desktopMSTSC /v:remote_ip:remote_port start the script by command1PsExec.exe \\ip -accepteula -u user -p password -i cmd or use query user find ID 1PsExec.exe \\ip -accepteula -u user -p password -i ID cmd About wmicopen remote desktop service 1wmic /node:"[full machine name]" /USER:"[domain]\[username]" PATH win32_terminalservicesetting WHERE (__Class!="") CALL SetAllowTSConnections 1 use wmic open remote process 1wmic /node:ip /user:"administrator" /password:"password" process call create commandline="command"]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>PsExec</tag>
        <tag>bat</tag>
      </tags>
  </entry>
</search>
